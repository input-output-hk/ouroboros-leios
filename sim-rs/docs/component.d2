title: {
  label: "sim-rs - Component Diagram"
  near: top-center
  shape: text
  style.font-size: 24
  style.bold: true
}

# Styles
classes: {
  component: {
    style: {
      stroke: "#2a2a2a"
      fill: "#ffffff"
      font-color: "#2a2a2a"
      border-radius: 10
      shadow: true
    }
  }
  container: {
    style: {
      stroke: "#2a2a2a"
      fill: "#f5f5f5"
      font-color: "#2a2a2a"
      border-radius: 10
      shadow: true
    }
  }
  subcomponent: {
    style: {
      stroke: "#666666"
      fill: "#ffffff"
      font-color: "#2a2a2a"
      border-radius: 5
      shadow: false
    }
  }
}

# Main Containers
sim-cli: {
  class: container
  label: "sim-cli"

  event_monitor: {
    class: component
    label: "EventMonitor\nTracks and processes simulation events"

    stats: {
      class: subcomponent
      label: "Stats Tracking\n- Block stats\n- Transaction stats\n- Network stats"
    }

    output: {
      class: subcomponent
      label: "Output Handling\n- EventStream\n- SlotStream"
    }
  }

  cli: {
    class: component
    label: "CLI Interface\n- Argument parsing\n- Config loading\n- Simulation setup"
  }
}

sim-core: {
  class: container
  label: "sim-core"

  clock: {
    class: component
    label: "Clock\n- Time management\n- Timestamp handling\n- Time scaling"
  }

  config: {
    class: component
    label: "Configuration"

    node_config: {
      class: subcomponent
      label: "NodeConfig\n- Location\n- Stake\n- Peers"
    }

    sim_config: {
      class: subcomponent
      label: "SimConfig\n- Network params\n- Protocol params\n- System params"
    }
  }

  model: {
    class: component
    label: "Domain Models"

    blocks: {
      class: subcomponent
      label: "Blocks\n- PraosBlock\n- InputBlock\n- EndorserBlock"
    }

    transactions: {
      class: subcomponent
      label: "Transactions\n- Transaction\n- TransactionId"
    }

    votes: {
      class: subcomponent
      label: "Voting\n- VoteBundle\n- Endorsement"
    }
  }

  network: {
    class: component
    label: "Network"

    source: {
      class: subcomponent
      label: "NetworkSource\n- Message receiving\n- Message scheduling"
    }

    sink: {
      class: subcomponent
      label: "NetworkSink\n- Message sending\n- Connection management"
    }
  }

  events: {
    class: component
    label: "Event System"

    tracker: {
      class: subcomponent
      label: "EventTracker\n- Event emission\n- Event timestamping"
    }

    types: {
      class: subcomponent
      label: "Event Types\n- Block events\n- Transaction events\n- Vote events"
    }
  }

  probability: {
    class: component
    label: "Probability\n- Distribution types\n- Random sampling"
  }

  simulation: {
    class: component
    label: "Simulation Engine"

    event_queue: {
      class: subcomponent
      label: "EventQueue\n- Event scheduling\n- Event ordering"
    }

    node_sim: {
      class: subcomponent
      label: "Node Simulation\n- State management\n- Protocol logic"
    }
  }
}

# Core Relationships
sim-cli.cli -> sim-cli.event_monitor: "Creates and configures"
sim-cli.cli -> sim-core.simulation: "Initializes and runs"
sim-cli.event_monitor -> sim-core.events: "Receives and processes events"

# Simulation Engine Relationships
sim-core.simulation.event_queue -> sim-core.clock: "Uses for timing"
sim-core.simulation.node_sim -> sim-core.network: "Manages communication"
sim-core.simulation -> sim-core.events: "Emits events"
sim-core.simulation -> sim-core.config: "Uses configuration"

# Network Relationships
sim-core.network.source -> sim-core.clock: "Uses for message timing"
sim-core.network.sink -> sim-core.model: "Transmits"

# Model Relationships
sim-core.model.blocks -> sim-core.model.transactions: "Contains"
sim-core.model.blocks -> sim-core.model.votes: "References"
sim-core.model -> sim-core.probability: "Uses for randomization"

# Event System Relationships
sim-core.events.tracker -> sim-core.model: "References for event data"
sim-core.events.tracker -> sim-core.clock: "Uses for timestamps"

# Configuration Relationships
sim-core.config.node_config -> sim-core.model: "Configures"
sim-core.config.sim_config -> sim-core.simulation: "Configures"
