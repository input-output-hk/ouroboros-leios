name: CI
env:
  ALLOWED_URIS: "https://github.com https://api.github.com"
  TRUSTED_PUBLIC_KEYS: "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ="
  SUBSTITUTERS: "https://cache.nixos.org/ https://cache.iog.io"

on:
  pull_request:
  push:
    branches:
      - main
jobs:
  typecheck:
    name: Typecheck specification
    runs-on: ubuntu-22.04
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      - name: 💾 Cache Nix store
        uses: actions/cache@v3.0.8
        id: nix-cache
        with:
          path: /tmp/nixcache
          key: ${{ runner.os }}-nix-typecheck-${{ hashFiles('flake.lock') }}
          restore-keys: ${{ runner.os }}-nix-typecheck-
      - name: 🛠️ Install Nix
        uses: cachix/install-nix-action@v21
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_url: https://releases.nixos.org/nix/nix-2.10.3/install
          extra_nix_config: |
            allowed-uris = ${{ env.ALLOWED_URIS }}
            trusted-public-keys = ${{ env.TRUSTED_PUBLIC_KEYS }}
            substituters = ${{ env.SUBSTITUTERS }}
            experimental-features = nix-command flakes
      - name: 💾➤ Import Nix store cache
        if: "steps.nix-cache.outputs.cache-hit == 'true'"
        run: "nix-store --import < /tmp/nixcache"
      - name: 🏗️ Build specification
        run: |
          nix build --show-trace --accept-flake-config .#leiosSpec
      - name: ➤💾 Export Nix store cache
        if: "steps.nix-cache.outputs.cache-hit != 'true'"
        run: "nix-store --export $(find /nix/store -maxdepth 1 -name '*-*') > /tmp/nixcache"

  compile:
    name: Build Haskell packages with GHC ${{ matrix.ghc-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        ghc-version: ["9.8"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
          # Defaults, added for clarity:
          cabal-version: "latest"
          cabal-update: true

      - name: Install libraries
        run: sudo apt-get install -y graphviz libpango1.0-dev libgtk-3-dev

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: cabal build all

      - name: Run tests
        run: cabal test all

  rs-compile:
    name: Check Rust packages
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Check Rust packages compilation
        working-directory: sim-rs
        run: |
          cargo check
          if [ $? -ne 0 ]; then
            echo "Cargo check failed"
            exit 1
          fi

  hlint-check:
    name: Check Haskell sources with HLint
    runs-on: ubuntu-22.04

    - name: 'Set up HLint'
      uses: haskell-actions/hlint-setup@v2

    - name: 'Run HLint'
      uses: haskell-actions/hlint-run@v2
      with:
        path: simulation/
        fail-on: warning

  fourmolu-check:
    name: Check Haskell sources with fourmolu
    runs-on: ubuntu-22.04
    steps:
      # Note that you must checkout your code before running haskell-actions/run-fourmolu
      - uses: actions/checkout@v4
      - uses: haskell-actions/run-fourmolu@v11
        with:
          version: "0.15.0.0"

  generate-diagrams:
    name: Generate D2 Diagrams
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Install D2
        run: |
          curl -fsSL https://d2lang.com/install.sh | sh -s --
          d2 --version

      - name: Generate PNG files
        run: |
          find . -name "*.d2" -type f -exec sh -c '
            for file do
              output_file="${file%.d2}.png"
              echo "Converting $file to $output_file"
              d2 "$file" "$output_file"
            done
          ' sh {} +

      - name: Check for changes
        id: changes
        run: |
          git add *.png
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -m "Auto-generate diagram PNGs [skip ci]"
          git push origin HEAD:${{ github.head_ref || github.ref_name }}

  build-docusaurus:
    runs-on: ubuntu-22.04
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"
          cache-dependency-path: site/yarn.lock

      - name: 📦 Install dependencies
        working-directory: site
        run: yarn install

      - name: 🏗️ Build Docusaurus site
        working-directory: site
        run: |
          yarn build

      - name: 🚀 Publish Docusaurus build
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-build
          if-no-files-found: error
          path: |
            site/build/*

  publish-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    needs:
      - build-docusaurus
    steps:
      - name: 📥 Download Docusaurus build
        uses: actions/download-artifact@v4
        with:
          name: docusaurus-build
          path: ./github-pages

      - name: 🚀 Publish GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN || github.token }}
          publish_dir: ./github-pages
          cname: leios.cardano-scaling.org
